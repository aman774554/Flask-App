# Decorators
==============================================
def decorator_function(original_function):
    def wrapper_function():
        print("Before the function call")
        original_function()
        print("After the function call")
    return wrapper_function

@decorator_function
def greet():
    print("Hello, Python!")

greet()

=================================================
1. *args (Non-Keyword Arguments)
------------------------------------------
def add_numbers(*args):
    return sum(args)

print(add_numbers(1, 2, 3, 4))  # Output: 10

2. **kwargs (Keyword Arguments)
--------------------------------------
def person_info(**kwargs):
    for key, value in kwargs.items():
        print(f"{key}: {value}")

person_info(name="Alice", age=25, city="New York")
=========================================================
Iterator
class MyIterator:
    def __init__(self, max):
        self.max = max
        self.current = 0

    def __iter__(self):
        return self

    def __next__(self):
        if self.current < self.max:
            val = self.current
            self.current += 1
            return val
        else:
            raise StopIteration

it = MyIterator(3)
for num in it:
    print(num)  # Output: 0, 1, 2
=====================================================
Generator
def my_generator():
    yield 1
    yield 2
    yield 3

gen = my_generator()
print(next(gen))  # Output: 1
print(next(gen))  # Output: 2
print(next(gen))  # Output: 3
print(next(gen))  # Output: eror Stopiteration


