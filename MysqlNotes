https://chatgpt.com/share/67d07a25-d0ac-800d-a7b6-40fa4bee034c

https://chatgpt.com/share/67ddb3a1-3448-800d-ac07-f04ce36a9797
===============================================================
CREATE DATABASE school;
USE school;

CREATE TABLE students (
    id INT PRIMARY KEY AUTO_INCREMENT,
    name VARCHAR(50),
    age INT,
    email VARCHAR(100) UNIQUE
);

ALTER TABLE students ADD COLUMN phone VARCHAR(15);

DROP TABLE students;
TRUNCATE TABLE students;
===============================================================
INSERT INTO students (name, age, email) 
VALUES ('John Doe', 22, 'john@example.com');

UPDATE students 
SET age = 23 
WHERE name = 'John Doe';

DELETE FROM students 
WHERE name = 'John Doe';

SELECT * FROM students;

===============================================================
SELECT name, age FROM students WHERE age > 20 ORDER BY age DESC;
SELECT age, COUNT(*) FROM students GROUP BY age HAVING COUNT(*) > 2;
===============================================================
GRANT ALL PRIVILEGES ON school.* TO 'user1'@'localhost' IDENTIFIED BY 'password';
REVOKE SELECT ON school.students FROM 'user1'@'localhost';
===============================================================
START TRANSACTION;
UPDATE students SET age = 25 WHERE id = 1;
SAVEPOINT save1;
ROLLBACK TO save1;
COMMIT;
==============================================================='
SELECT students.name, courses.course_name
FROM students 
INNER JOIN courses ON students.id = courses.student_id;
==============================================================
CREATE INDEX idx_name ON students (name);
---
CREATE TRIGGER before_insert_students
BEFORE INSERT ON students
FOR EACH ROW
SET NEW.email = LOWER(NEW.email);
---
CREATE VIEW student_view AS 
SELECT name, age FROM students WHERE age > 20;

# Backup
mysqldump -u root -p school > backup.sql

# Restore
mysql -u root -p school < backup.sql
========================================
Queries
SELECT * FROM employees;
SELECT DISTINCT department FROM employees;
SELECT * FROM employees WHERE salary > 50000;
SELECT * FROM employees ORDER BY salary DESC;

SELECT e.name, d.department_name  
FROM employees e  
INNER JOIN departments d ON e.department_id = d.id;

// Employees same manager
SELECT e1.name AS Employee, e2.name AS Manager  
FROM employees e1  
JOIN employees e2 ON e1.manager_id = e2.id;

//Count employees per department
SELECT department_id, COUNT(*) AS total_employees  
FROM employees  
GROUP BY department_id;

//Find the highest salary in each department
SELECT department_id, MAX(salary) AS max_salary  
FROM employees  
GROUP BY department_id;

//Find the 2nd highest salary
SELECT DISTINCT salary  
FROM employees  
ORDER BY salary DESC  
LIMIT 1 OFFSET 1;

//Using CASE for conditional output
SELECT name, salary,  
  CASE  
    WHEN salary > 70000 THEN 'High'  
    WHEN salary BETWEEN 40000 AND 70000 THEN 'Medium'  
    ELSE 'Low'  
  END AS salary_category  
FROM employees;

//Find duplicate records
SELECT name, COUNT(*)  
FROM employees  
GROUP BY name  
HAVING COUNT(*) > 1;







